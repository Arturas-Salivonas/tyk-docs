openapi: 3.0.1
info:
  title: Tyk Enterprise Developer Portal admin API
  description: |-
    ## <a name="introduction"></a> Introduction
    The Tyk Enterpise Developer Portal API offers programmatic access to all portal resources that your instance of the portal manages. This API  repeats functionality of the user interface and enables APIs consumers integrating their portal instances with their other IT systems such as billings, CRMs, ITSM systems and other software.
    
    ## Authentication
    This API uses admin authorization token that is available for admin users of the portal in the profile page.
  version: "v1.5.0"
servers:
  - url: 'http://localhost:3001'
tags:
  - name: Providers
    description: API Providers connected to this portal instance
  - name: Users
    description: Portal admins and API consumers
  - name: Organisations
    description: Organisation of API consumers and the portal admins
  - name: Teams
    description: Teams of API consumers and the portal admins
  - name: Products
    description: Marketing description and visibility of the API Products surfaced in this portal instance
  - name: Tutorials for API Products
    description: Tutorials that are defined for the API products
  - name: API documentation for API Products
    description: OpenAPI specs for APIs included into the API Prodcuts
  - name: Plans
    description: Marketing description and visibility settings of usage plans defined in this portal instance
  - name: Catalogues
    description: Catalogues of API Products listed on this portal instance
  - name: Catalogue audiences
    description: Audience management
  - name: Access requests
    description: Access requests to API Products
  - name: Applications and credentials
    description: "Developer applications and API credential for develoeprs"
  - name: Portal configuration
    description: "Show the current portal configuration"
  - name: Pages and content
    description: "Pages and content on the pages"
  - name: Themes
    description: "Management of the portal's visual themes"
paths:
  /access_requests:
    get:
      description: List all access requests that exist in the portal
      operationId: /access_requests-GET
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AccessRequest-index'
          description: OK
      security: []
      summary: List all access requests
      tags:
        - Access requests
  /access_requests/{access_request_id}:
    delete:
      description: This endpoint deletes an access request. If an access request is approved, its credentials will be revoked and removed from a gateway or an Identity provider
      operationId: /access_requests/:access_request_id-DELETE
      parameters:
        - description: UID of this access request
          in: path
          name: access_request_id
          required: true
          schema:
            name: UID of this access request
            type: integer
            example: 1
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Status'
          description: OK
        "404":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Status'
          description: Not found
      security: []
      summary: Delete an access request
      tags:
        - Access requests
    get:
      description: Get an access request's data
      operationId: /access_requests/:access_request_id-GET
      parameters:
        - description: UID of this access request
          in: path
          name: access_request_id
          required: true
          schema:
            name: UID of this access request
            type: integer
            example: 1
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AccessRequest-show'
          description: OK
      security: []
      summary: Get an access request's data
      tags:
        - Access requests
  /access_requests/{access_request_id}/approve:
    put:
      description: This endpoint trigger approval of an access request. A call to this API will trigger creation of credentials in a gateway or an Identity Provider
      operationId: /access_requests/:access_request_id/approve-PUT
      parameters:
        - description: UID of this access request
          in: path
          name: access_request_id
          required: true
          schema:
            name: UID of this access request
            type: integer
            example: 1
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/StatusWithMessage'
          description: OK
        "422":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/StatusWithMessage'
          description: OK
      security: []
      summary: Approve an access request
      tags:
        - Access requests
  /access_requests/{access_request_id}/reject:
    put:
      description: Reject an access request
      operationId: /access_requests/:access_request_id/reject-PUT
      parameters:
        - description: UID of this access request
          in: path
          name: access_request_id
          required: true
          schema:
            name: UID of this access request
            type: integer
            example: 1
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/StatusWithMessage'
          description: OK
        "422":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/StatusWithMessage'
          description: OK
      security: []
      summary: Reject an access request
      tags:
        - Access requests
  /apps:
    get:
      description: List all developer application
      operationId: /apps-GET
      parameters: []
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Client-index'
          description: OK
      security: []
      summary: List all developer application that exist in the portal
      tags:
        - Applications and credentials
    post:
      description: Create a new developer application
      operationId: /apps-POST
      parameters: []
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Client-create'
        description: ""
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Client-show'
          description: OK
      security: []
      summary: Create a new developer application
      tags:
        - Applications and credentials
  /apps/{app_id}:
    delete:
      description: Delete an application. The application, all its access requests, and credentials will be removed. Also, it will trigger removal of all credentials that belong to this application from a gateway or / and an Identity Provider
      operationId: /apps/:app_id-DELETE
      parameters:
        - description: ""
          in: path
          name: app_id
          required: true
          schema:
            name: ""
            type: integer
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Client-show'
          description: OK
      security: []
      summary: Delete an application
      tags:
        - Applications and credentials
    get:
      description: Get an application's data
      operationId: /apps/:app_id-GET
      parameters:
        - description: ""
          in: path
          name: app_id
          required: true
          schema:
            name: ""
            type: integer
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Client-show'
          description: OK
      security: []
      summary: Get an application's data
      tags:
        - Applications and credentials
    put:
      description: This endpoint updates an application's data such as its name, description, redirect URI, and the user to whom this application belongs
      operationId: /apps/:app_id-PUT
      parameters:
        - description: ""
          in: path
          name: app_id
          required: true
          schema:
            name: ""
            type: integer
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Client-update'
        description: ""
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Client-show'
          description: OK
      security: []
      summary: Update an application
      tags:
        - Applications and credentials
  /apps/{app_id}/access-requests:
    get:
      description: List all access requests for this application
      operationId: /apps/:app_id/access-requests-GET
      parameters:
        - description: ""
          in: path
          name: app_id
          required: true
          schema:
            name: ""
            type: integer
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AccessRequest-index'
          description: OK
      security: []
      summary: List all access requests for this application
      tags:
        - Applications and credentials
  /apps/{app_id}/access-requests/{access-request_id}:
    delete:
      description: This endpoint deletes an access request. If this access request was approved and has any credenitals attached to it then all of them will be removed and revoked in a gateway on an Identity provider
      operationId: /apps/:app_id/access-requests/:access-request_id-DELETE
      parameters:
        - description: ""
          in: path
          name: access-request_id
          required: true
          schema:
            name: ""
            type: integer
        - description: ""
          in: path
          name: app_id
          required: true
          schema:
            name: ""
            type: integer
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AccessRequest-show'
          description: OK
      security: []
      summary: Delete an access request
      tags:
        - Applications and credentials
    get:
      description: Get an access request's data
      operationId: /apps/:app_id/access-requests/:access-request_id-GET
      parameters:
        - description: ""
          in: path
          name: access-request_id
          required: true
          schema:
            name: ""
            type: integer
        - description: ""
          in: path
          name: app_id
          required: true
          schema:
            name: ""
            type: integer
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AccessRequest-show'
          description: OK
      security: []
      summary: Get an access request's data
      tags:
        - Applications and credentials
  /apps/{app_id}/access-requests/{access-request_id}/credentials:
    get:
      description: List credentials from a specific access request for this app
      operationId: /apps/:app_id/access-requests/:access-request_id/credentials-GET
      parameters:
        - description: ""
          in: path
          name: access-request_id
          required: true
          schema:
            name: ""
            type: integer
        - description: ""
          in: path
          name: app_id
          required: true
          schema:
            name: ""
            type: integer
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Credential-index'
          description: OK
      security: []
      summary: List credentials for an access request
      tags:
        - Applications and credentials
  /apps/{app_id}/access-requests/{access-request_i}/credentials/{credential_id}:
    delete:
      description: This endpoint deletes a credentials and removes an API key from the gateway or an oAuth2.0 client from the IdP
      operationId: /apps/:app_id/access-requests/:access-request_id/credentials/:credential_id-DELETE
      parameters:
        - description: ""
          in: path
          name: credential_id
          required: true
          schema:
            name: ""
            type: integer
        - description: ""
          in: path
          name: access-request_id
          required: true
          schema:
            name: ""
            type: integer
        - description: ""
          in: path
          name: app_id
          required: true
          schema:
            name: ""
            type: integer
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Credential-show'
          description: OK
      security: []
      summary: Delete a credential from an access request
      tags:
        - Applications and credentials
    get:
      description: Get a credential by its ID
      operationId: /apps/:app_id/access-requests/:access-request_id/credentials/:credential_id-GET
      parameters:
        - description: ""
          in: path
          name: credential_id
          required: true
          schema:
            name: ""
            type: integer
        - description: ""
          in: path
          name: access-request_id
          required: true
          schema:
            name: ""
            type: integer
        - description: ""
          in: path
          name: app_id
          required: true
          schema:
            name: ""
            type: integer
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Credential-show'
          description: OK
      security: []
      summary: Get a credential by its ID
      tags:
        - Applications and credentials
  /apps/{app_id}/provision:
    put:
      description: Create a new access request for this application
      operationId: /apps/:app_id/provision-PUT
      parameters:
        - description: ""
          in: path
          name: app_id
          required: true
          schema:
            name: ""
            type: integer
      responses: {}
      security: []
      summary: Create a new access request for this application
      tags:
        - Applications and credentials
  /catalogues:
    get:
      description: List all catalogues that exist in the portal
      operationId: /catalogues-GET
      parameters: []
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Catalogue-index'
          description: OK
      security: []
      summary: List all catalogues
      tags:
        - Catalogues
    post:
      description: Create a new catalogue
      operationId: /catalogues-POST
      parameters: []
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Catalogue-create'
        description: ""
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Catalogue-show'
          description: OK
      security: []
      summary: Create a new catalogue
      tags:
        - Catalogues
  /catalogues/{catalogue_id}:
    delete:
      description: This endpoint deletes a catalogue. When a catalog is deleted, all of its audiences are also deleted
      operationId: /catalogues/:catalogue_id-DELETE
      parameters:
        - description: UID of a catalogue
          in: path
          name: catalogue_id
          required: true
          schema:
            name: UID of a catalogue
            type: integer
            example: 1
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Status'
          description: OK
        "404":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Status'
          description: Not found
      security: []
      summary: Delete a catalogue
      tags:
        - Catalogues
    get:
      description: Get a catalogue
      operationId: /catalogues/:catalogue_id-GET
      parameters:
        - description: UID of a catalogue
          in: path
          name: catalogue_id
          required: true
          schema:
            name: UID of a catalogue
            type: integer
            example: 1
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Catalogue-show'
          description: OK
      security: []
      summary: Get a catalogue
      tags:
        - Catalogues
    put:
      description: Update a catalogue's data such as name and visibility settings
      operationId: /catalogues/:catalogue_id-PUT
      parameters:
        - description: UID of a catalogue
          in: path
          name: catalogue_id
          required: true
          schema:
            name: UID of a catalogue
            type: integer
            example: 1
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Catalogue-update'
        description: ""
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Catalogue-show'
          description: OK
      security: []
      summary: Update a catalogue
      tags:
        - Catalogues
  /catalogues/{catalogue_id}/audiences:
    get:
      description: List audiences that have access to this catalogue. Each audience is a team that belongs to a specific organisation
      operationId: /catalogues/:catalogue_id/audiences-GET
      parameters:
        - description: UID of a catalogue
          in: path
          name: catalogue_id
          required: true
          schema:
            name: UID of a catalogue
            type: integer
            example: 1
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/OrganisationCatalogue-index'
          description: OK
      security: []
      summary: List audiences for this catalogue
      tags:
        - Catalogue audiences
    post:
      description: Add a new audience to this catalogue. Please note that if the catalog's visibility is set to 'public', the audiences will be ignored
      operationId: /catalogues/:catalogue_id/audiences-POST
      parameters:
        - description: ""
          in: path
          name: catalogue_id
          required: true
          schema:
            name: ""
            type: integer
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/OrganisationCatalogue-create'
        description: ""
      responses:
        "201":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/OrganisationCatalogue-show'
          description: OK
        "422":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/OnlyErrors'
          description: Not found of bad request
      security: []
      summary: Add a new audience to this catalogue
      tags:
        - Catalogue audiences
  /catalogues/{catalogue_id}/audiences/{audience_id}:
    delete:
      description: Remove an audience from this catalog. Please note that if the catalog's visibility is set to 'public', the audiences will be ignored
      operationId: /catalogues/:catalogue_id/audiences/:audience_id-DELETE
      parameters:
        - description: UID of an audience
          in: path
          name: audience_id
          required: true
          schema:
            name: UID of an audience
            type: integer
            example: 1
        - description: UID of a catalogue
          in: path
          name: catalogue_id
          required: true
          schema:
            name: UID of a catalogue
            type: integer
            example: 1
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Status'
          description: OK
        "404":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Status'
          description: Not found
      security: []
      summary: Remove an audience from a catalog
      tags:
        - Catalogue audiences
    get:
      description: List all audience for this catalogue
      operationId: /catalogues/:catalogue_id/audiences/:audience_id-GET
      parameters:
        - description: UID of an audience
          in: path
          name: audience_id
          required: true
          schema:
            name: UID of an audience
            type: integer
            example: 1
        - description: UID of a catalogue
          in: path
          name: catalogue_id
          required: true
          schema:
            name: UID of a catalogue
            type: integer
            example: 1
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/OrganisationCatalogue-show'
          description: OK
        "404":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/OrganisationCatalogue-show'
          description: Not found
      security: []
      summary: List all audience for this catalogue
      tags:
        - Catalogue audiences
  /configs:
    get:
      description: View the current configuration of the portal
      operationId: /configs-GET
      parameters: []
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Settings-index'
          description: OK
      security: []
      summary: Get the portal config
      tags:
        - Portal configuration
  /organisations:
    get:
      description: List all developer organisations
      operationId: /organisations-GET
      parameters: []
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Organisation-index'
          description: OK
      security: []
      summary: List all developer organisations
      tags:
        - Organisations
    post:
      description: Create a new developer organisation
      operationId: /organisations-POST
      parameters: []
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Organisation-create'
        description: ""
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Organisation-show'
          description: OK
      security: []
      summary: Create a new developer organisation
      tags:
        - Organisations
  /organisations/{organisation_id}:
    delete:
      description: Please note that this endpoint deletes an organisation but not its developers. When an organization is deleted, all users are moved to the Default organization. To completely erase an organization and all its users, delete the users first
      operationId: /organisations/:organisation_id-DELETE
      parameters:
        - description: UID of an organisation
          in: path
          name: organisation_id
          required: true
          schema:
            name:  UID of an organisation
            type: integer
            example: 2
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Status'
          description: OK
        "404":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Status'
          description: Not found
      security: []
      summary: Delete an organisation
      tags:
        - Organisations
    get:
      description: Get an organisation
      operationId: /organisations/:organisation_id-GET
      parameters:
        - description: UID of an organisation
          in: path
          name: organisation_id
          required: true
          schema:
            name:  UID of an organisation
            type: integer
            example: 2
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Organisation-show'
          description: OK
      security: []
      summary: Get an organisation
      tags:
        - Organisations
    put:
      description: Update an organisation's data. At this point, you can change only the name of an organisation
      operationId: /organisations/:organisation_id-PUT
      parameters:
        - description: UID of an organisation
          in: path
          name: organisation_id
          required: true
          schema:
            name:  UID of an organisation
            type: integer
            example: 2
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Organisation-create'
        description: ""
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Organisation-show'
          description: OK
      security: []
      summary: Update an organisation
      tags:
        - Organisations
  /organisations/{organisation_id}/teams:
    get:
      description: List all teams for an organisation
      operationId: /organisations/:organisation_id/teams-GET
      parameters:
        - description: UID of an organisation
          in: path
          name: organisation_id
          required: true
          schema:
            name:  UID of an organisation
            type: integer
            example: 2
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Team-index'
          description: OK
      security: []
      summary: List all teams for an organisation
      tags:
        - Teams
    post:
      description: Create a new team for an organisation
      operationId: /organisations/:organisation_id/teams-POST
      parameters:
        - description: ""
          in: path
          name: organisation_id
          required: true
          schema:
            name: ""
            type: integer
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Team-create'
        description: ""
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Team-show'
          description: OK
      security: []
      summary: Create a new team for an organisation
      tags:
        - Teams
  /organisations/{organisation_id}/teams/{team_id}:
    delete:
      description: This endpoint deletes a team from an organisation. Please note that developers that belong to that team won't be removed. Instead, they will moved to the default team of that organization
      operationId: /organisations/:organisation_id/teams/:team_id-DELETE
      parameters:
        - description: UID of a team
          in: path
          name: team_id
          required: true
          schema:
            name:  UID of a team
            type: integer
            example: 2
        - description: UID of an organisation
          in: path
          name: organisation_id
          required: true
          schema:
            name:  UID of an organisation
            type: integer
            example: 2
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Status'
          description: OK
        "404":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Status'
          description: Not found
      security: []
      summary: Delete a team from an organisation
      tags:
        - Teams
    get:
      description: Get teams for an organisation
      operationId: /organisations/:organisation_id/teams/:team_id-GET
      parameters:
        - description: UID of a team
          in: path
          name: team_id
          required: true
          schema:
            name:  UID of a team
            type: integer
            example: 2
        - description: UID of an organisation
          in: path
          name: organisation_id
          required: true
          schema:
            name:  UID of an organisation
            type: integer
            example: 2
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Team-show'
          description: OK
      security: []
      summary: Get teams for an organisation
      tags:
        - Teams
    put:
      description: Update a team for an organisation by add or remove users, or changing the name of the team
      operationId: /organisations/:organisation_id/teams/:team_id-PUT
      parameters:
        - description: UID of a team
          in: path
          name: team_id
          required: true
          schema:
            name:  UID of a team
            type: integer
            example: 2
        - description: UID of an organisation
          in: path
          name: organisation_id
          required: true
          schema:
            name:  UID of an organisation
            type: integer
            example: 2
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Team-update'
        description: ""
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Team-show'
          description: OK
      security: []
      summary: Update a team for an organisation
      tags:
        - Teams
  /pages:
    get:
      description: List all content pages. This doesn't include blog posts and API Products
      operationId: /pages-GET
      parameters: []
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Page-index'
          description: OK
      security: []
      summary: List all content pages
      tags:
        - Pages and content
    post:
      description: Create a new content page
      operationId: /pages-POST
      parameters: []
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Page-create'
        description: ""
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Page-show'
          description: OK
      security: []
      summary: Create a new content page
      tags:
        - Pages and content
  /pages/{page_id}:
    delete:
      description: Delete a page
      operationId: /pages/:page_id-DELETE
      parameters:
        - description: ""
          in: path
          name: page_id
          required: true
          schema:
            name: ""
            type: integer
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Page-show'
          description: OK
      security: []
      summary: Delete a page
      tags:
        - Pages and content
    get:
      description: Get a page
      operationId: /pages/:page_id-GET
      parameters:
        - description: ""
          in: path
          name: page_id
          required: true
          schema:
            name: ""
            type: integer
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Page-show'
          description: OK
      security: []
      summary: Get a page
      tags:
        - Pages and content
    put:
      description: Update a page including title. path, and status
      operationId: /pages/:page_id-PUT
      parameters:
        - description: ""
          in: path
          name: page_id
          required: true
          schema:
            name: ""
            type: integer
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Page-update'
        description: ""
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Page-show'
          description: OK
      security: []
      summary: Update a page
      tags:
        - Pages and content
  /pages/{page_id}/content-blocks:
    get:
      description: List all content blocks which are displayed on this page
      operationId: /pages/:page_id/content-blocks-GET
      parameters:
        - description: ""
          in: path
          name: page_id
          required: true
          schema:
            name: ""
            type: integer
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ContentBlock-index'
          description: OK
      security: []
      summary: List all content blocks which are displayed on this page
      tags:
        - Pages and content
    post:
      description: Create a new content block for on page
      operationId: /pages/:page_id/content-blocks-POST
      parameters:
        - description: ""
          in: path
          name: page_id
          required: true
          schema:
            name: ""
            type: integer
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ContentBlock-create'
        description: ""
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ContentBlock-show'
          description: OK
      security: []
      summary: Create a new content block for on page
      tags:
        - Pages and content
  /pages/{page_id}/content-blocks/{content-block_id}:
    delete:
      description: Delete a content blocks from this page
      operationId: /pages/:page_id/content-blocks/:content-block_id-DELETE
      parameters:
        - description: ""
          in: path
          name: content-block_id
          required: true
          schema:
            name: ""
            type: integer
        - description: ""
          in: path
          name: page_id
          required: true
          schema:
            name: ""
            type: integer
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ContentBlock-show'
          description: OK
      security: []
      summary: Delete a content blocks from this page
      tags:
        - Pages and content
    get:
      description: Get a content block
      operationId: /pages/:page_id/content-blocks/:content-block_id-GET
      parameters:
        - description: ""
          in: path
          name: content-block_id
          required: true
          schema:
            name: ""
            type: integer
        - description: ""
          in: path
          name: page_id
          required: true
          schema:
            name: ""
            type: integer
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ContentBlock-show'
          description: OK
      security: []
      summary: Get a content block
      tags:
        - Pages and content
    put:
      description: Update a content block including the content itself and the name
      operationId: /pages/:page_id/content-blocks/:content-block_id-PUT
      parameters:
        - description: ""
          in: path
          name: content-block_id
          required: true
          schema:
            name: ""
            type: integer
        - description: ""
          in: path
          name: page_id
          required: true
          schema:
            name: ""
            type: integer
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ContentBlock-update'
        description: ""
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ContentBlock-show'
          description: OK
      security: []
      summary: Update a content block
      tags:
        - Pages and content
  /plans:
    get:
      description: List all plans available in the portal
      operationId: /plans-GET
      parameters: []
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Plan-index'
          description: OK
      security: []
      summary: List all plans
      tags:
        - Plans
  /plans/{plan_id}:
    get:
      description: Get a plan
      operationId: /plans/:plan_id-GET
      parameters:
        - description: UID of a plan
          in: path
          name: plan_id
          required: true
          schema:
            name: UID of a plan
            type: integer
            example: 1
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Plan-show'
          description: OK
      security: []
      summary: Get a plan
      tags:
        - Plans
    put:
      description: Update a plan including catalogue name, description, and oAuth2.0 scope
      operationId: /plans/:plan_id-PUT
      parameters:
        - description: UID of a plan
          in: path
          name: plan_id
          required: true
          schema:
            name: UID of a plan
            type: integer
            example: 1
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Plan-update'
        description: ""
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Plan-show'
          description: OK
      security: []
      summary: Update a plan
      tags:
        - Plans
  /products:
    get:
      description: List all products available in the portal
      operationId: /products-GET
      parameters: []
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Product-index'
          description: OK
      security: []
      summary: List all products
      tags:
        - Products
  /products/{product_id}:
    get:
      description: Get a product
      operationId: /products/:product_id-GET
      parameters:
        - description: UID of an API Product
          in: path
          name: product_id
          required: true
          schema:
            name: UID of an API Product
            type: integer
            example: 1
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Product-show'
          description: OK
        "404":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Product-show'
          description: OK
      security: []
      summary: Get a product
      tags:
        - Products
    put:
      description: "Update a product including marketing description, display name, oAuth2.0 scope, and path"
      operationId: /products/:product_id-PUT
      parameters:
        - description: UID of an API Product
          in: path
          name: product_id
          required: true
          schema:
            name: UID of an API Product
            type: integer
            example: 1
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Product-update'
        description: ""
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Product-show'
          description: OK
        "422":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/OnlyErrors'
          description: Not found or Bad request
      security: []
      summary: Update a product
      tags:
        - Products
  /products/{product_id}/api-details:
    get:
      description: List all APIs included in this API Product
      operationId: /products/:product_id/api-details-GET
      parameters:
        - description: UID of an API Product
          in: path
          name: product_id
          required: true
          schema:
            name: UID of an API Product
            type: integer
            example: 1
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/APIDetail-index'
          description: OK
      security: []
      summary: List all APIs included in this API Product
      tags:
        - API documentation for API Products
  /products/{product_id}/api-details/{api-id}:
    get:
      description: Get description of an API
      operationId: /products/:product_id/api-details/:api-id-GET
      parameters:
        - description: UID of an API as it comes from the API Provider
          in: path
          name: api-id
          required: true
          schema:
            name: ID of an API as it comes from the API Provider
            type: string
            example: a0ce49d559ce49d64fe608ea3728082a
        - description: UID of an API Product
          in: path
          name: product_id
          required: true
          schema:
            name: UID of an API Product
            type: integer
            example: 1
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/APIDetail-show'
          description: OK
        "404":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/APIDetail-show'
          description: Not found
      security: []
      summary: Get description of an API
      tags:
        - API documentation for API Products
    put:
      description: Update description of an API including name, OAS URL, and description
      operationId: /products/:product_id/api-details/:api-id-PUT
      parameters:
        - description: UID of an API as it comes from the API Provider
          in: path
          name: api-id
          required: true
          schema:
            name: ID of an API as it comes from the API Provider
            type: string
            example: a0ce49d559ce49d64fe608ea3728082a
        - description: UID of an API Product
          in: path
          name: product_id
          required: true
          schema:
            name: UID of an API Product
            type: integer
            example: 1
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/APIDetail-update'
        description: ""
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/APIDetail'
          description: OK
      security: []
      summary: Update description of an API
      tags:
        - API documentation for API Products
  /products/{product_id}/docs:
    get:
      description: List all tutorial for this API Product
      operationId: /products/:product_id/docs-GET
      parameters:
        - description: UID of an API Product
          in: path
          name: product_id
          required: true
          schema:
            name: UID of an API Product
            type: integer
            example: 1
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Post-index'
          description: OK
      security: []
      summary: List all tutorial for this API Product
      tags:
        - Tutorials for API Products
    post:
      description: Create a new tutorial page for this API Product
      operationId: /products/:product_id/docs-POST
      parameters:
        - description: UID of an API Product
          in: path
          name: product_id
          required: true
          schema:
            name: UID of an API Product
            type: integer
            example: 1
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Post-create'
        description: ""
      responses:
        "201":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Post-create'
          description: OK
        "422":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/OnlyErrors'
          description: OK
      security: []
      summary: Create a new tutorial page for this API Product
      tags:
        - Tutorials for API Products
  /products/{product_id}/docs/{doc_id}:
    delete:
      description: Delete a tutorial page from this API Product
      operationId: /products/:product_id/docs/:doc_id-DELETE
      parameters:
        - description: UID of an API Product
          in: path
          name: product_id
          required: true
          schema:
            name: UID of an API Product
            type: integer
            example: 1
        - description: UID of a tutorial page
          in: path
          name: doc_id
          required: true
          schema:
            name: UID of a tutorial page
            type: integer
            example: 1
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Status'
          description: OK
        "404":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Status'
          description: Not found
      security: []
      summary: Delete a tutorial page from this API Product
      tags:
        - Tutorials for API Products
    get:
      description: Get a tutorial page
      operationId: /products/:product_id/docs/:doc_id-GET
      parameters:
        - description: UID of an API Product
          in: path
          name: product_id
          required: true
          schema:
            name: UID of an API Product
            type: integer
            example: 1
        - description: UID of a tutorial page
          in: path
          name: doc_id
          required: true
          schema:
            name: UID of a tutorial page
            type: integer
            example: 1
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Post-index-elem'
          description: OK
        "404":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Post-index-elem'
          description: OK
      security: []
      summary: Get a tutorial page
      tags:
        - Tutorials for API Products
    put:
      description: Update a tutorial page including its metadata and content
      operationId: /products/:product_id/docs/:doc_id-PUT
      parameters:
        - description: UID of an API Product
          in: path
          name: product_id
          required: true
          schema:
            name: UID of an API Product
            type: integer
            example: 1
        - description: UID of a tutorial page
          in: path
          name: doc_id
          required: true
          schema:
            name: UID of a tutorial page
            type: integer
            example: 1
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Post-create'
        description: ""
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Post-index-elem'
          description: OK
        "422":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/OnlyErrors'
          description: Not found or bad request
      security: []
      summary: Update a tutorial page
      tags:
        - Tutorials for API Products
  /products/{product_id}/docs/reorder:
    post:
      description: Change order of tutorial pages in an API Product
      operationId: /products/:product_id/docs/reorder-POST
      parameters:
        - description: UID of an API Product
          in: path
          name: product_id
          required: true
          schema:
            name: UID of an API Product
            type: integer
            example: 1
        - description: UID of a tutorial page
          in: path
          name: doc_id
          required: true
          schema:
            name: UID of a tutorial page
            type: integer
            example: 1
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Post-reorder'
        description: "An array containing the UIDs of tutorial pages represents the new order of tutorial pages for this API Product. The tutorial page whose UID appears first in this array will be positioned first in the API Product's Get Started tab, and so on."
      responses:
        "200":
          description: OK
        "400":
          description: Bad request or API Product is not found
      security: []
      summary: Change order of tutorial pages
      tags:
        - Tutorials for API Products
  /providers:
    get:
      description: List all API Providers connected to this portal instance
      operationId: /providers-GET
      parameters: []
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Provider-index'
          description: OK
      security: []
      summary: List all API Providers
      tags:
        - Providers
    post:
      description: Create a new API Provider. The new API Provider will have the 'Unknows' synchronization status until the first synchronization attempt
      operationId: /providers-POST
      parameters: []
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Provider-create'
        description: ""
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Provider-show'
          description: OK
      security: []
      summary: Create a new API Provider
      tags:
        - Providers
  /providers/{provider_id}:
    delete:
      description: This endpoint delete an API Provider provider and removes all assests related to it such as API Products and Plans
      operationId: /providers/:provider_id-DELETE
      parameters:
        - description: UID of an API provider
          in: path
          name: provider_id
          required: true
          schema:
            name: UID of an API provider
            type: integer
            example: 1
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Status'
          description: OK
      security: []
      summary: Delete an API Provider
      tags:
        - Providers
    get:
      description: Get an API Provider configuration
      operationId: /providers/:provider_id-GET
      parameters:
        - description: UID of an API provider
          in: path
          name: provider_id
          required: true
          schema:
            name: UID of an API provider
            type: integer
            example: 1
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Provider-show'
          description: OK
      security: []
      summary: Get an API Provider configuration
      tags:
        - Providers
    put:
      description: Update Provider
      operationId: /providers/:provider_id-PUT
      parameters:
        - description: UID of an API provider
          in: path
          name: provider_id
          required: true
          schema:
            name: UID of an API provider
            type: integer
            example: 1
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Provider-update'
        description: ""
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Provider-show'
          description: OK
      security: []
      summary: Update Provider
      tags:
        - Providers
  /providers/{provider_id}/synchronize:
    put:
      description: Synchronize API Products and plans with an API Provider
      operationId: /providers/:provider_id/synchronize-PUT
      parameters:
        - description: UID of an API provider
          in: path
          name: provider_id
          required: true
          schema:
            name: UID of an API provider
            type: integer
            example: 1
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/StatusWithMessage'
          description: OK
        "422":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/StatusWithErrors'
          description: Error
      security: []
      summary: Synchronize API Products and plans with an API Provider
      tags:
        - Providers
  /themes:
    get:
      description: List all themes
      operationId: /themes-GET
      parameters: []
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Config-index'
          description: OK
      security: []
      summary: ist all themes
      tags:
        - Themes
  /themes/{theme_id}:
    delete:
      description: Delete a theme and all its assets
      operationId: /themes/:theme_id-DELETE
      parameters:
        - description: ""
          in: path
          name: theme_id
          required: true
          schema:
            name: ""
            type: integer
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Config-show'
          description: OK
      security: []
      summary: Delete a theme and all its assets
      tags:
        - Themes
    get:
      description: Get metadata for a theme such as name, author, version, and status
      operationId: /themes/:theme_id-GET
      parameters:
        - description: ""
          in: path
          name: theme_id
          required: true
          schema:
            name: ""
            type: integer
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Config-show'
          description: OK
      security: []
      summary: Get a theme
      tags:
        - Themes
  /themes/{theme_id}/activate:
    put:
      description: Activate a theme. When a new theme is activated, it becomes current theme for the Live portal and is displayed to all developers visiting the portal
      operationId: /themes/:theme_id/activate-PUT
      parameters:
        - description: ""
          in: path
          name: theme_id
          required: true
          schema:
            name: ""
            type: integer
      responses: {}
      security: []
      summary: Activate a theme
      tags:
        - Themes
  /themes/{theme_id}/download:
    get:
      description: Download a theme as a zip archive
      operationId: /themes/:theme_id/download-GET
      parameters:
        - description: ""
          in: path
          name: theme_id
          required: true
          schema:
            name: ""
            type: integer
      responses: {}
      security: []
      summary: Download a theme
      tags:
        - Themes
  /themes/upload:
    post:
      description: |-
        This endpoint uploads a theme that is archived as a zip file to the portal.

        If a theme with this name already exists in the portal, the uploaded theme will replace the existing theme. Otherwise, a new theme will be creted.

        The name of a theme is stored in the `name` field of `theme.json`.
      operationId: /themes/upload-POST
      parameters:
        - description: ""
          in: path
          name: theme_id
          required: true
          schema:
            name: ""
            type: integer
      responses: {}
      security: []
      summary: Upload a theme
      tags:
        - Themes
  /users:
    get:
      description: List all admin users and developers
      operationId: /users-GET
      parameters: []
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User-index'
          description: OK
      security: []
      summary: List all users
      tags:
        - Users
    post:
      description: Create a new admin user or developer
      operationId: /users-POST
      parameters: []
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/User-create'
        description: ""
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User-show'
          description: OK
      security: []
      summary: Create a new user
      tags:
        - Users
  /users/{user_id}:
    delete:
      description: Delete a user and all their applications. All credentials that are issued for those applications will be revoked and deleted as well
      operationId: /users/:user_id-DELETE
      parameters:
        - description: UID of a user
          in: path
          name: user_id
          required: true
          schema:
            name: UID of a user
            type: integer
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Status'
          description: OK
        "404":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Status'
          description: Not found
      security: []
      summary: Delete a user
      tags:
        - Users
    get:
      description: Get a user
      operationId: /users/:user_id-GET
      parameters:
        - description: UID of a user
          in: path
          name: user_id
          required: true
          schema:
            name: UID of a user
            type: integer
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User-show'
          description: OK
        "404":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User-show'
          description: OK
      security: []
      summary: Get a user
      tags:
        - Users
    put:
      description: Update a user data such as email, name, identity provider, and organization
      operationId: /users/:user_id-PUT
      parameters:
        - description: UID of a user
          in: path
          name: user_id
          required: true
          schema:
            name: UID of a user
            type: integer
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/User-update'
        description: ""
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User-show'
          description: OK
        "422":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/OnlyErrors'
          description: Not found or Bad request
      security: []
      summary: Update a user
      tags:
        - Users
components:
  schemas:
    Product-APIDetail-index:
      properties:
        APIID:
          type: string
          description: API ID from the Tyk Gateway
          example: "a0ce49d559ce49d64fe608ea3728082a"
        Name:
          type: string
          description: Name of an API as it is defined in the gateway
          example: "Payment API"
        Status:
          type: boolean
          description: "Status of this API: `true` means the API is up and `false` identifies that it is down"
          example: true
      type: object
    Product-APIDetail-edit:
      properties:
        Description:
          type: string
          description: Human-readable description of an API added by the portal admins
          example: This API provides payment endpoints
        OASUrl:
          type: string
          description: URL of OpenAPI Specification for this API. The document must be a valid OAS document
          example: "https://petstore.swagger.io/v2/swagger.json"
      type: object
    Product-APIDetail:
      properties:
        APIID:
          type: string
          description: API ID from the Tyk Gateway
          example: "a0ce49d559ce49d64fe608ea3728082a"
        APIType:
          type: string
          description: Authentication type of an API
          example: authToken
        Description:
          type: string
          description: Human-readable description of an API added by the portal admins
          example: This API provides payment endpoints
        ListenPath:
          type: string
          description: Listen path which is defined for this API in the gateway
          example: "/payments/"
        Name:
          type: string
          description: Name of an API as it is defined in the gateway
          example: "Payment API"
        OASUrl:
          type: string
          description: URL of OpenAPI Specification for this API. The document must be a valid OAS document
          example: "https://petstore.swagger.io/v2/swagger.json"
        Status:
          type: boolean
          description: "Status of this API: `true` means the API is up and `false` identifies that it is down"
          example: true
        TargetURL:
          type: string
          description: Upstream URL of this API
          example: "http://httpbin.org/"
      type: object
    APIDetail:
      properties:
        APIType:
          type: string
          description: Authentication type of an API
          example: authToken
        Description:
          type: string
          description: Human-readable description of an API added by the portal admins
          example: This API provides payment endpoints
        ListenPath:
          type: string
          description: Listen path which is defined for this API in the gateway
          example: "/payments/"
        Name:
          type: string
          description: Name of an API as it is defined in the gateway
          example: "Payment API"
        OASUrl:
          type: string
          description: URL of OpenAPI Specification for this API. The document must be a valid OAS document
          example: "https://petstore.swagger.io/v2/swagger.json"
        Status:
          type: boolean
          description: "Status of this API: `true` means the API is up and `false` identifies that it is down"
          example: true
        TargetURL:
          type: string
          description: Upstream URL of this API
          example: "http://httpbin.org/"
      type: object
    APIDetail-create:
      properties:
        APIID:
          type: string
          description: API ID from the Tyk Gateway
          example: "a0ce49d559ce49d64fe608ea3728082a"
        APIType:
          type: string
          description: Authentication type of an API
          example: authToken
        Description:
          type: string
          description: Human-readable description of an API added by the portal admins
          example: This API provides payment endpoints
        ListenPath:
          type: string
          description: Listen path which is defined for this API in the gateway
          example: "/payments/"
        Name:
          type: string
          description: Name of an API as it is defined in the gateway
          example: "Payment API"
        OASUrl:
          type: string
          description: URL of OpenAPI Specification for this API. The document must be a valid OAS document
          example: "https://petstore.swagger.io/v2/swagger.json"
        Status:
          type: boolean
          description: "Status of this API: `true` means the API is up and `false` identifies that it is down"
          example: true
        TargetURL:
          type: string
          description: Upstream URL of this API
          example: "http://httpbin.org/"
      type: object
    APIDetail-index:
      items:
        $ref: '#/components/schemas/APIDetail-index-elem'
      type: array
    APIDetail-index-elem:
      properties:
        APIID:
          type: string
          description: API ID from the Tyk Gateway
          example: "a0ce49d559ce49d64fe608ea3728082a"
        APIType:
          type: string
          description: Authentication type of an API
          example: authToken
        ListenPath:
          type: string
          description: Listen path which is defined for this API in the gateway
          example: "/payments/"
        Name:
          type: string
          description: Name of an API as it is defined in the gateway
          example: "Payment API"
        OASUrl:
          type: string
          description: URL of OpenAPI Specification for this API. The document must be a valid OAS document
          example: "https://petstore.swagger.io/v2/swagger.json"
        Status:
          type: boolean
          description: "Status of this API: `true` means the API is up and `false` identifies that it is down"
          example: true
        TargetURL:
          type: string
          description: Upstream URL of this API
          example: "http://httpbin.org/"
      type: object
    APIDetail-show:
      properties:
        APIID:
          type: string
          description: API ID from the Tyk Gateway
          example: "a0ce49d559ce49d64fe608ea3728082a"
        APIType:
          type: string
          description: Authentication type of an API
          example: authToken
        Description:
          type: string
          description: Human-readable description of an API added by the portal admins
          example: This API provides payment endpoints
        ListenPath:
          type: string
          description: Listen path which is defined for this API in the gateway
          example: "/payments/"
        Name:
          type: string
          description: Name of an API as it is defined in the gateway
          example: "Payment API"
        OASUrl:
          type: string
          description: URL of OpenAPI Specification for this API. The document must be a valid OAS document
          example: "https://petstore.swagger.io/v2/swagger.json"
        Status:
          type: boolean
          description: "Status of this API: `true` means the API is up and `false` identifies that it is down"
          example: true
        TargetURL:
          type: string
          description: Upstream URL of this API
          example: "http://httpbin.org/"
      type: object
    APIDetail-update:
      properties:
        Description:
          type: string
          description: Human-readable description of an API added by the portal admins
          example: This API provides payment endpoints
        Name:
          type: string
          description: Name of an API as it is defined in the gateway
          example: "Payment API"
        OASUrl:
          type: string
          description: URL of OpenAPI Specification for this API. The document must be a valid OAS document
          example: "https://petstore.swagger.io/v2/swagger.json"
        Status:
          type: boolean
          description: "Status of this API: `true` means the API is up and `false` identifies that it is down"
          example: true
      type: object
    AccessRequest:
      properties:
        AuthType:
          type: string
        Catalogue:
          $ref: '#/components/schemas/Catalogue'
        CatalogueID:
          type: integer
        Client:
          $ref: '#/components/schemas/Client'
        ClientID:
          type: integer
        Credentials:
          items:
            $ref: '#/components/schemas/Credential'
          type: array
        DCREnabled:
          type: boolean
        DCRTemplateID:
          type: integer
        Model:
          $ref: '#/components/schemas/Model'
        Plan:
          $ref: '#/components/schemas/Plan'
        PlanID:
          type: integer
        Products:
          items:
            $ref: '#/components/schemas/Product'
          type: array
        ProviderID:
          type: integer
        ProvisionImmediately:
          type: boolean
        Status:
          type: string
        User:
          $ref: '#/components/schemas/User'
        UserID:
          type: integer
      type: object
    AccessRequest-create:
      properties:
        AuthType:
          type: string
        Catalogue:
          $ref: '#/components/schemas/Catalogue'
        CatalogueID:
          type: integer
        Client:
          $ref: '#/components/schemas/Client'
        ClientID:
          type: integer
        Credentials:
          items:
            $ref: '#/components/schemas/Credential'
          type: array
        DCREnabled:
          type: boolean
        DCRTemplateID:
          type: integer
        Model:
          $ref: '#/components/schemas/Model'
        Plan:
          $ref: '#/components/schemas/Plan'
        PlanID:
          type: integer
        Products:
          items:
            $ref: '#/components/schemas/Product'
          type: array
        ProviderID:
          type: integer
        ProvisionImmediately:
          type: boolean
        Status:
          type: string
        User:
          $ref: '#/components/schemas/User'
        UserID:
          type: integer
      type: object
    AccessRequest-index:
      items:
        $ref: '#/components/schemas/AccessRequest-index-elem'
      type: array
    AccessRequest-index-elem:
      properties:
        AuthType:
          type: string
          description: Authentication type of APIs that are included in this API Product
          example: "authToken"
        Catalogue:
          type: string
          description: Catalogue of API Products included in this access request
          example: "Public Catalogue"
        Client:
          type: string
          description: Name of the developer app
          example: "Payment application"
        DCREnabled:
          type: boolean
          description: Identifies if this access request was created using Dynamic client registration
          example: false
        ID:
          type: integer
          description: UID of access request
          example: 1
        Plan:
          type: string
          description: Name of a plan included in this access request
          example: Free plan
        Products:
          type: string
          description: Names of products included in this access request
          example: Payment API
        ProvisionImmediately:
          type: boolean
          description: Identifies if this access request was approved automatically
          example: true
        Status:
          enum: ["approved", "rejected", "pending"]
          description: Approval status of this access request
        User:
          type: string
          description: Descriptor of a user to whom this access request belongs
          example: "User#1"
        CreatedAt:
          format: date-time
          type: string
          description: Timestamp of when this access request was created
          example: "2023-06-25 13:37"
        UpdatedAt:
          format: date-time
          type: string
          description: Timestamp of when this access request was updated the last time
          example: "2023-06-25 13:37"
        DeletedAt:
          format: date-time
          type: string
          description: Timestamp of when this access request was removed
          example: "2023-06-25 13:37"
      type: object
    AccessRequest-show:
      properties:
        Credentials:
          items:
            $ref: '#/components/schemas/Credential'
          type: array
        AuthType:
          type: string
          description: Authentication type of APIs that are included in this API Product
          example: "authToken"
        Catalogue:
          type: string
          description: Catalogue of API Products included in this access request
          example: "Public Catalogue"
        Client:
          type: string
          description: Name of the developer app
          example: "Payment application"
        DCREnabled:
          type: boolean
          description: Identifies if this access request was created using Dynamic client registration
          example: false
        ID:
          type: integer
          description: UID of access request
          example: 1
        Plan:
          type: string
          description: Name of a plan included in this access request
          example: Free plan
        Products:
          type: string
          description: Names of products included in this access request
          example: Payment API
        ProvisionImmediately:
          type: boolean
          description: Identifies if this access request was approved automatically
          example: true
        Status:
          enum: ["approved", "rejected", "pending"]
          description: Approval status of this access request
        User:
          type: string
          description: Descriptor of a user to whom this access request belongs
          example: "User#1"
        CreatedAt:
          format: date-time
          type: string
          description: Timestamp of when this access request was created
          example: "2023-06-25 13:37"
        UpdatedAt:
          format: date-time
          type: string
          description: Timestamp of when this access request was updated the last time
          example: "2023-06-25 13:37"
        DeletedAt:
          format: date-time
          type: string
          description: Timestamp of when this access request was removed
          example: "2023-06-25 13:37"
      type: object
    AccessRequest-update:
      properties:
        AuthType:
          type: string
        Catalogue:
          $ref: '#/components/schemas/Catalogue'
        CatalogueID:
          type: integer
        Client:
          $ref: '#/components/schemas/Client'
        ClientID:
          type: integer
        Credentials:
          items:
            $ref: '#/components/schemas/Credential'
          type: array
        DCREnabled:
          type: boolean
        DCRTemplateID:
          type: integer
        Model:
          $ref: '#/components/schemas/Model'
        Plan:
          $ref: '#/components/schemas/Plan'
        PlanID:
          type: integer
        Products:
          items:
            $ref: '#/components/schemas/Product'
          type: array
        ProviderID:
          type: integer
        ProvisionImmediately:
          type: boolean
        Status:
          type: string
        User:
          $ref: '#/components/schemas/User'
        UserID:
          type: integer
      type: object
    Base:
      properties:
        Crop:
          type: boolean
        CropOptions:
          type: object
        Delete:
          type: boolean
        FileHeader: {}
        FileName:
          type: string
        Options:
          type: object
        Reader: {}
        Url:
          type: string
      type: object
    Basic:
      properties:
        ConfirmedAt:
          format: date-time
          type: string
        EncryptedPassword:
          type: string
        Provider:
          type: string
        UID:
          type: string
        UserID:
          type: string
      type: object
    BlogSetting:
      properties:
        AllowFormSubmission:
          type: boolean
        Enable:
          type: boolean
      type: object
    Cart:
      properties:
        CatalogueOrders:
          type: string
        Model:
          $ref: '#/components/schemas/Model'
        ProviderID:
          type: integer
        UserID:
          type: integer
      type: object
    Catalogue:
      properties:
        Model:
          $ref: '#/components/schemas/Model'
        Name:
          type: string
        NameWithSlug:
          $ref: '#/components/schemas/Slug'
        OrgCatalogues:
          items:
            $ref: '#/components/schemas/OrganisationCatalogue'
          type: array
        Plans:
          items:
            $ref: '#/components/schemas/Plan'
          type: array
        Products:
          items:
            $ref: '#/components/schemas/Product'
          type: array
        VisibilityStatus:
          type: string
      type: object
    Catalogue-create:
      properties:
        Name:
          type: string
          description: Name of this catalogue
          exmaple: Private catalogue
        NameWithSlug:
          type: string
          description: URL slug of this catalogue page
          example: "private-catalogue"
        Plans:
          items:
            type: integer
            description: UID of a plan which should be included into this catalogue
            example: 1
          type: array
          description: Array of plans' UIDs which should be included into this catalogue
        Products:
          items:
            type: integer
            description: UID of a product which should be included into this catalogue
            example: 1
          type: array
          description: Array of products' UIDs which should be included into this catalogue
        VisibilityStatus:
          enum: ["Private", "Public"]
          description: Visibility of this catalogue. Could be either Private or Public. The `Private` status means this catalogue is visible only to a limited audience while `Public` catalogue is available to all developers
          example: Private
        OrgCatalogues:
          items:
            $ref: '#/components/schemas/OrganisationCatalogue-create'
          type: array
      type: object
    Catalogue-index:
      items:
        $ref: '#/components/schemas/Catalogue-index-elem'
      type: array
    Catalogue-index-elem:
      properties:
        ID:
          type: integer
          description: UID of this catalogue
          example: 1
        Name:
          type: string
          description: Name this catalogue
          example: Private Catalogue
        NameWithSlug:
          type: string
          description: URL slug of this catalogue page
          example: "private-catalogue"
        VisibilityStatus:
          enum: ["Private", "Public"]
          description: Visibility of this catalogue. Could be either Private or Public. The `Private` status means this catalogue is visible only to a limited audience while `Public` catalogue is available to all developers
          example: Private
      type: object
    Catalogue-show:
      properties:
        ID:
          type: integer
          description: UID of a catalogue
          example: 1
        Name:
          type: string
          description: Name this catalogue
          example: Private Catalogue
        CreatedAt:
          format: date-time
          type: string
          description: Timestamp of when this catalogue was created
          example: "2023-06-25 13:37"
        UpdatedAt:
          format: date-time
          type: string
          description: Timestamp of when this catalogue was updated the last time
          example: "2023-06-25 13:37"
        OrgCatalogues:
          items:
            $ref: '#/components/schemas/OrganisationCatalogue'
          type: array
        Plans:
          items:
            type: string
            description: Name of a plan
            example: Free plan
          type: array
          description: Plans that are included into this catalogue
        Products:
          items:
            type: string
            description: Name of a product
            example: ACME Payment API
          type: array
          description: Products that are included into this catalogue
        VisibilityStatus:
          enum: ["Private", "Public"]
          description: Visibility of this catalogue. Could be either Private or Public. The `Private` status means this catalogue is visible only to a limited audience while `Public` catalogue is available to all developers
          example: Private
      type: object
    Catalogue-update:
      properties:
        Name:
          type: string
          description: Name of this catalogue
          exmaple: Private catalogue
        NameWithSlug:
          type: string
          description: URL slug of this catalogue page
          example: "private-catalogue"
        Plans:
          items:
            type: integer
            description: UID of a plan which should be included into this catalogue
            example: 1
          type: array
          description: Array of plans' UIDs which should be included into this catalogue. To remove all plans from a catalogue use `null` value for this property
        Products:
          items:
            type: integer
            description: UID of a product which should be included into this catalogue
            example: 1
          type: array
          description: Array of products' UIDs which should be included into this catalogue. To remove all product from a catalogue use `null` value for this property
        VisibilityStatus:
          enum: ["Private", "Public"]
          description: Visibility of this catalogue. Could be either Private or Public. The `Private` status means this catalogue is visible only to a limited audience while `Public` catalogue is available to all developers
          example: Private
      type: object
    Certificate:
      properties:
        CertFile:
          type: string
        KeyFile:
          type: string
        Name:
          type: string
      type: object
    Client:
      properties:
        AccessRequests:
          items:
            $ref: '#/components/schemas/AccessRequest'
          type: array
        Credentials:
          items:
            $ref: '#/components/schemas/Credential'
          type: array
        Description:
          type: string
        Model:
          $ref: '#/components/schemas/Model'
        Name:
          type: string
        Products:
          items:
            $ref: '#/components/schemas/Product'
          type: array
        RedirectURLs:
          type: string
        UserID:
          type: integer
      type: object
    Client-create:
      properties:
        AccessRequests:
          items:
            $ref: '#/components/schemas/AccessRequest'
          type: array
        Credentials:
          items:
            $ref: '#/components/schemas/Credential'
          type: array
        Description:
          type: string
        Model:
          $ref: '#/components/schemas/Model'
        Name:
          type: string
        Products:
          items:
            $ref: '#/components/schemas/Product'
          type: array
        RedirectURLs:
          type: string
        UserID:
          type: integer
      type: object
    Client-index:
      items:
        $ref: '#/components/schemas/Client-index-elem'
      type: array
    Client-index-elem:
      properties:
        AccessRequests:
          items:
            $ref: '#/components/schemas/AccessRequest'
          type: array
        Credentials:
          items:
            $ref: '#/components/schemas/Credential'
          type: array
        Description:
          type: string
        Model:
          $ref: '#/components/schemas/Model'
        Name:
          type: string
        Products:
          items:
            $ref: '#/components/schemas/Product'
          type: array
        RedirectURLs:
          type: string
        UserID:
          type: integer
      type: object
    Client-show:
      properties:
        AccessRequests:
          items:
            $ref: '#/components/schemas/AccessRequest'
          type: array
        Credentials:
          items:
            $ref: '#/components/schemas/Credential'
          type: array
        Description:
          type: string
        Model:
          $ref: '#/components/schemas/Model'
        Name:
          type: string
        Products:
          items:
            $ref: '#/components/schemas/Product'
          type: array
        RedirectURLs:
          type: string
        UserID:
          type: integer
      type: object
    Client-update:
      properties:
        AccessRequests:
          items:
            $ref: '#/components/schemas/AccessRequest'
          type: array
        Credentials:
          items:
            $ref: '#/components/schemas/Credential'
          type: array
        Description:
          type: string
        Model:
          $ref: '#/components/schemas/Model'
        Name:
          type: string
        Products:
          items:
            $ref: '#/components/schemas/Product'
          type: array
        RedirectURLs:
          type: string
        UserID:
          type: integer
      type: object
    Config-create:
      properties:
        Author:
          type: string
        ID:
          type: string
        Name:
          type: string
        Path:
          type: string
        Status:
          type: boolean
        ThemeFile:
          $ref: '#/components/schemas/File'
        Version:
          type: string
      type: object
    Config-index:
      items:
        $ref: '#/components/schemas/Config-index-elem'
      type: array
    Config-index-elem:
      properties:
        Author:
          type: string
        ID:
          type: string
        Name:
          type: string
        Path:
          type: string
        Status:
          type: boolean
        ThemeFile:
          $ref: '#/components/schemas/File'
        Version:
          type: string
      type: object
    Config-show:
      properties:
        Author:
          type: string
        ID:
          type: string
        Name:
          type: string
        Path:
          type: string
        Status:
          type: boolean
        ThemeFile:
          $ref: '#/components/schemas/File'
        Version:
          type: string
      type: object
    Config-update:
      properties:
        Author:
          type: string
        ID:
          type: string
        Name:
          type: string
        Path:
          type: string
        Status:
          type: boolean
        ThemeFile:
          $ref: '#/components/schemas/File'
        Version:
          type: string
      type: object
    ContentBlock:
      properties:
        Content:
          type: string
        MarkdownEnabled:
          type: boolean
        Model:
          $ref: '#/components/schemas/Model'
        Name:
          type: string
        PageID:
          type: integer
      type: object
    ContentBlock-create:
      properties:
        Content:
          type: string
        MarkdownEnabled:
          type: boolean
        Model:
          $ref: '#/components/schemas/Model'
        Name:
          type: string
        PageID:
          type: integer
      type: object
    ContentBlock-index:
      items:
        $ref: '#/components/schemas/ContentBlock-index-elem'
      type: array
    ContentBlock-index-elem:
      properties:
        Content:
          type: string
        MarkdownEnabled:
          type: boolean
        Model:
          $ref: '#/components/schemas/Model'
        Name:
          type: string
        PageID:
          type: integer
      type: object
    ContentBlock-show:
      properties:
        Content:
          type: string
        MarkdownEnabled:
          type: boolean
        Model:
          $ref: '#/components/schemas/Model'
        Name:
          type: string
        PageID:
          type: integer
      type: object
    ContentBlock-update:
      properties:
        Content:
          type: string
        MarkdownEnabled:
          type: boolean
        Model:
          $ref: '#/components/schemas/Model'
        Name:
          type: string
        PageID:
          type: integer
      type: object
    Credential:
      properties:
        AccessRequest:
          type: string
          description: Access request description
          example: "AccessRequest#2"
        Credential:
          type: string
          description: "Auth token from the Tyk API Gateway. For oAuth2.0 credentials it's an empty string"
          example: "eyJvcmciOiI1ZTlkOTU0NGExZGNkNjAwMDFkMGVkMjAiLCJpZCI6IjY4MjZjZGViMmVlMzQ3ZGQ5ZjQ1ZWZmMjEyMTlhOWU1IiwiaCI6Im11cm11cjY0In0="
        CredentialHash:
          type: string
          description: "Hash of an auth token from the Tyk API Gateway. For oAuth2.0 credentials it's an empty string"
          example: "e1212449778b7ba4"
        DCRRegistrationAccessToken:
          type: string
          description: Access token for Dynamic client registration that is associated with credentials. Has non-empty value only for oAuth2.0 credentials
          example: "eyJhbGciOiJIUzI1NiIsInR5cCIgOiAiSldUIiwia2lkIiA6ICJmZjIyNmYyZi0yMDA0LTRlOWItOTFmOC1iOGYzOTA2ZDJmYTQifQ.eyJleHAiOjAsImlhdCI6MTY4NzczNzM5MCwianRpIjoiNjc3OTgwYjktZjgwMS00MmQ2LWI4OTItZDdkNDk1MmFhMjU5IiwiaXNzIjoiaHR0cDovL2xvY2FsaG9zdDo5OTk5L3JlYWxtcy9tYXN0ZXIiLCJhdWQiOiJodHRwOi8vbG9jYWxob3N0Ojk5OTkvcmVhbG1zL21hc3RlciIsInR5cCI6IlJlZ2lzdHJhdGlvbkFjY2Vzc1Rva2VuIiwicmVnaXN0cmF0aW9uX2F1dGgiOiJhdXRoZW50aWNhdGVkIn0.wyE93vktqlCywgtyJ8HBTjRPG9NvZEDR3zpSMncdwno"
        DCRRegistrationClientURI:
          type: string
          description: DCR client registration URI that is associated with credentials. Has non-empty value only for oAuth2.0 credentials
          example: "http://idp-host/realms/master/clients-registrations/openid-connect/cf4ab76c-c437-4ba2-8e94-1323269b5090"
        DCRResponse:
          type: string
          description: Cached client registration response from the Identity Provider. Has non-empty value only for oAuth2.0 credentials
          example: '{"redirect_uris":["http://app-host/auth"],"token_endpoint_auth_method":"client_secret_basic","grant_types":["implicit","client_credentials"],"response_types":["id_token","id_token token"],"client_id":"cf4ab76c-c437-4ba2-8e94-1323269b5090","client_secret":"iDe9fkFNBDbVS5JOtYNUDIO8w8N6dWzf","client_name":"oAuth2.0 client","scope":"address phone offline_access microprofile-jwt","subject_type":"public","request_uris":[],"tls_client_certificate_bound_access_tokens":false,"client_id_issued_at":1687737390,"client_secret_expires_at":0,"registration_client_uri":"http://idp-host/realms/master/clients-registrations/openid-connect/cf4ab76c-c437-4ba2-8e94-1323269b5090","registration_access_token":"eyJhbGciOiJIUzI1NiIsInR5cCIgOiAiSldUIiwia2lkIiA6ICJmZjIyNmYyZi0yMDA0LTRlOWItOTFmOC1iOGYzOTA2ZDJmYTQifQ.eyJleHAiOjAsImlhdCI6MTY4NzczNzM5MCwianRpIjoiNjc3OTgwYjktZjgwMS00MmQ2LWI4OTItZDdkNDk1MmFhMjU5IiwiaXNzIjoiaHR0cDovL2xvY2FsaG9zdDo5OTk5L3JlYWxtcy9tYXN0ZXIiLCJhdWQiOiJodHRwOi8vbG9jYWxob3N0Ojk5OTkvcmVhbG1zL21hc3RlciIsInR5cCI6IlJlZ2lzdHJhdGlvbkFjY2Vzc1Rva2VuIiwicmVnaXN0cmF0aW9uX2F1dGgiOiJhdXRoZW50aWNhdGVkIn0.wyE93vktqlCywgtyJ8HBTjRPG9NvZEDR3zpSMncdwno","backchannel_logout_session_required":false,"require_pushed_authorization_requests":false,"frontchannel_logout_session_required":false}'
        Expires:
          format: date-time
          type: string
          exmaple: "1969-12-31 19:00"
          description: Date-time when this credential expires
        OAuthClientID:
          type: string
          description: oAuth2.0 client ID. Has non-empty value only for oAuth2.0 credentials
          example: "cf4ab76c-c437-4ba2-8e94-1323269b5090"
        OAuthClientSecret:
          type: string
          description: oAuth2.0 client secret. Has non-empty value only for oAuth2.0 credentials
          example: "iDe9fkFNBDbVS5JOtYNUDIO8w8N6dWzf"
        RedirectURI:
          type: string
          description: Redirect URI for oAuth2.0 authorization_code and PKCE grant types
          example: "https://app-host/auth"
        ResponseType:
          type: string
          description: Response types supported by this credential. Has non-empty value only for oAuth2.0 credentials
          example: "id_token token"
        Scope:
          type: string
          description: oAuth2.0 scope available to this credential. Has non-empty value only for oAuth2.0 credentials
          example: "payment client"
        TokenEndpoints:
          type: string
          description: oAuth2.0 `token_endpoint_auth_method` that this credential uses. Has non-empty value only for oAuth2.0 credentials
          example: "payment client"
      type: object
    Credential-create:
      properties:
        AccessRequest:
          $ref: '#/components/schemas/AccessRequest'
        AccessRequestID:
          type: integer
        ClientID:
          type: integer
        Credential:
          type: string
        CredentialHash:
          type: string
        DCRRegistrationAccessToken:
          type: string
        DCRRegistrationClientURI:
          type: string
        DCRResponse:
          type: string
        Expires:
          format: date-time
          type: string
        GrantType:
          type: string
        Model:
          $ref: '#/components/schemas/Model'
        OAuthClientID:
          type: string
        OAuthClientSecret:
          type: string
        RedirectURI:
          type: string
        ResponseType:
          type: string
        Scope:
          type: string
        TokenEndpoints:
          type: string
      type: object
    Credential-index:
      items:
        $ref: '#/components/schemas/Credential-index-elem'
      type: array
    Credential-index-elem:
      properties:
        AccessRequest:
          $ref: '#/components/schemas/AccessRequest'
        AccessRequestID:
          type: integer
        ClientID:
          type: integer
        Credential:
          type: string
        CredentialHash:
          type: string
        DCRRegistrationAccessToken:
          type: string
        DCRRegistrationClientURI:
          type: string
        DCRResponse:
          type: string
        Expires:
          format: date-time
          type: string
        GrantType:
          type: string
        Model:
          $ref: '#/components/schemas/Model'
        OAuthClientID:
          type: string
        OAuthClientSecret:
          type: string
        RedirectURI:
          type: string
        ResponseType:
          type: string
        Scope:
          type: string
        TokenEndpoints:
          type: string
      type: object
    Credential-show:
      properties:
        AccessRequest:
          $ref: '#/components/schemas/AccessRequest'
        AccessRequestID:
          type: integer
        ClientID:
          type: integer
        Credential:
          type: string
        CredentialHash:
          type: string
        DCRRegistrationAccessToken:
          type: string
        DCRRegistrationClientURI:
          type: string
        DCRResponse:
          type: string
        Expires:
          format: date-time
          type: string
        GrantType:
          type: string
        Model:
          $ref: '#/components/schemas/Model'
        OAuthClientID:
          type: string
        OAuthClientSecret:
          type: string
        RedirectURI:
          type: string
        ResponseType:
          type: string
        Scope:
          type: string
        TokenEndpoints:
          type: string
      type: object
    Credential-update:
      properties:
        AccessRequest:
          $ref: '#/components/schemas/AccessRequest'
        AccessRequestID:
          type: integer
        ClientID:
          type: integer
        Credential:
          type: string
        CredentialHash:
          type: string
        DCRRegistrationAccessToken:
          type: string
        DCRRegistrationClientURI:
          type: string
        DCRResponse:
          type: string
        Expires:
          format: date-time
          type: string
        GrantType:
          type: string
        Model:
          $ref: '#/components/schemas/Model'
        OAuthClientID:
          type: string
        OAuthClientSecret:
          type: string
        RedirectURI:
          type: string
        ResponseType:
          type: string
        Scope:
          type: string
        TokenEndpoints:
          type: string
      type: object
    DCRConfigTemplate:
      properties:
        DCRConfigID:
          type: integer
        Description:
          type: string
        GrantType:
          type: string
        Model:
          $ref: '#/components/schemas/Model'
        Name:
          type: string
        OktaAppType:
          type: string
        Products:
          items:
            $ref: '#/components/schemas/Product'
          type: array
        ResponseType:
          type: string
        TokenEndpoints:
          type: string
      type: object
    DatabaseSetting:
      properties:
        ConnectionString:
          type: string
        Dialect:
          type: string
        EnableLogs:
          type: boolean
        MaxRetries:
          type: integer
        RetryDelay:
          type: integer
      type: object
    File:
      properties:
        OSS:
          $ref: '#/components/schemas/OSS'
      type: object
    ImageBlock:
      properties:
        Image:
          $ref: '#/components/schemas/ImageStore'
        Model:
          $ref: '#/components/schemas/Model'
        Name:
          type: string
        PageID:
          type: integer
      type: object
    ImageStore:
      properties:
        OSS:
          $ref: '#/components/schemas/OSS'
      type: object
    Model:
      properties:
        CreatedAt:
          format: date-time
          type: string
        DeletedAt:
          format: date-time
          type: string
        ID:
          type: integer
        UpdatedAt:
          format: date-time
          type: string
      type: object
    OSS:
      properties:
        Base:
          $ref: '#/components/schemas/Base'
      type: object
    Organisation:
      properties:
        Model:
          $ref: '#/components/schemas/Model'
        Name:
          type: string
        Teams:
          items:
            $ref: '#/components/schemas/Team'
          type: array
        Users:
          items:
            $ref: '#/components/schemas/User'
          type: array
      type: object
    Organisation-create:
      properties:
        Name:
          type: string
          description: Name of an organisation
          example: Default Organisation
      type: object
    Organisation-index:
      items:
        $ref: '#/components/schemas/Organisation-index-elem'
      type: array
    Organisation-index-elem:
      properties:
        ID:
          type: integer
          description: UID of an organisation
          example: 1
        Name:
          type: string
          description: Name of an organisation
          example: Default Organisation
      type: object
    Organisation-show:
      properties:
        CreatedAt:
          format: date-time
          description: Date-time when a user is created
          example: "2023-06-23 21:02"
          type: string
        UpdatedAt:
          format: date-time
          description: Date-time when a user is updated the last time
          example: "2023-06-23 21:02"
          type: string
        ID:
          type: integer
          description: UID of an organisation
          example: 1
        Name:
          type: string
          description: Name of an organisation
          example: Default Organisation
        Teams:
          items:
            $ref: '#/components/schemas/Team-index-elem'
          type: array
          description: Teams included in this organisation
        Users:
          type: array
          description: Users that are included in this organisation. For newly created organisation this field will be an empty array
          items:
            $ref: '#/components/schemas/User-index-elem'
      type: object
    Organisation-update:
      properties:
        Model:
          $ref: '#/components/schemas/Model'
        Name:
          type: string
        Teams:
          items:
            $ref: '#/components/schemas/Team'
          type: array
        Users:
          items:
            $ref: '#/components/schemas/User'
          type: array
      type: object
    OrganisationCatalogue:
      properties:
        Catalogue:
          type: string
          description: Name of a catalogue
          example: Private catalogue
        ID:
          type: integer
          description: UID of this audience
          example: 1
        Name:
          type: string
          description: Optional name of this audience
        Organisation:
          type: string
          description: Name of an organisation
          example: Default organisation
      type: object
    OrganisationCatalogue-create:
      properties:
        OrganisationID:
          type: integer
          description: UID of an organisation
          example: 1
        TeamID:
          type: integer
          description: UID of a team
          example: 1
      type: object
    OrganisationCatalogue-index:
      items:
        $ref: '#/components/schemas/OrganisationCatalogue-index-elem'
      type: array
    OrganisationCatalogue-index-elem:
      properties:
        ID:
          type: integer
          description: UID of this audience
          example: 1
        OrganisationID:
          type: integer
          description: UID of an organisation
          example: 1
        TeamID:
          type: integer
          description: UID of an team
          example: 1
      type: object
    OrganisationCatalogue-show:
      properties:
        ID:
          type: integer
          description: UID of this audience
          example: 1
        OrganisationID:
          type: integer
          description: UID of this audience
          example: 1
        TeamID:
          type: integer
          description: UID of this audience
          example: 1
        CreatedAt:
          format: date-time
          description: Date-time when this audience is created
          example: "2023-06-23 21:02"
          type: string
        UpdatedAt:
          format: date-time
          description: Date-time when this audience is updated the last time
          example: "2023-06-23 21:02"
          type: string
      type: object
    OrganisationCatalogue-update:
      properties:
        Catalogue:
          $ref: '#/components/schemas/Catalogue'
        CatalogueID:
          type: integer
        Model:
          $ref: '#/components/schemas/Model'
        Name:
          type: string
        Organisation:
          $ref: '#/components/schemas/Organisation'
        OrganisationID:
          type: integer
        TeamID:
          type: integer
      type: object
    Page-create:
      properties:
        AllowFormSubmission:
          type: boolean
        ContentBlocks:
          items:
            $ref: '#/components/schemas/ContentBlock'
          type: array
        ImageBlocks:
          items:
            $ref: '#/components/schemas/ImageBlock'
          type: array
        Model:
          $ref: '#/components/schemas/Model'
        PageTypeID:
          type: integer
        Path:
          type: string
        Status:
          type: string
        Template:
          type: string
        TextContentBlocks:
          items:
            $ref: '#/components/schemas/TextContentBlock'
          type: array
        Title:
          type: string
      type: object
    Page-index:
      items:
        $ref: '#/components/schemas/Page-index-elem'
      type: array
    Page-index-elem:
      properties:
        AllowFormSubmission:
          type: boolean
        ContentBlocks:
          items:
            $ref: '#/components/schemas/ContentBlock'
          type: array
        ImageBlocks:
          items:
            $ref: '#/components/schemas/ImageBlock'
          type: array
        Model:
          $ref: '#/components/schemas/Model'
        PageTypeID:
          type: integer
        Path:
          type: string
        Status:
          type: string
        Template:
          type: string
        TextContentBlocks:
          items:
            $ref: '#/components/schemas/TextContentBlock'
          type: array
        Title:
          type: string
      type: object
    Page-show:
      properties:
        AllowFormSubmission:
          type: boolean
        ContentBlocks:
          items:
            $ref: '#/components/schemas/ContentBlock'
          type: array
        ImageBlocks:
          items:
            $ref: '#/components/schemas/ImageBlock'
          type: array
        Model:
          $ref: '#/components/schemas/Model'
        PageTypeID:
          type: integer
        Path:
          type: string
        Status:
          type: string
        Template:
          type: string
        TextContentBlocks:
          items:
            $ref: '#/components/schemas/TextContentBlock'
          type: array
        Title:
          type: string
      type: object
    Page-update:
      properties:
        AllowFormSubmission:
          type: boolean
        ContentBlocks:
          items:
            $ref: '#/components/schemas/ContentBlock'
          type: array
        ImageBlocks:
          items:
            $ref: '#/components/schemas/ImageBlock'
          type: array
        Model:
          $ref: '#/components/schemas/Model'
        PageTypeID:
          type: integer
        Path:
          type: string
        Status:
          type: string
        Template:
          type: string
        TextContentBlocks:
          items:
            $ref: '#/components/schemas/TextContentBlock'
          type: array
        Title:
          type: string
      type: object
    Plan:
      properties:
        AuthType:
          type: string
        AutoApproveAccessRequests:
          type: boolean
        Catalogues:
          items:
            $ref: '#/components/schemas/Catalogue'
          type: array
        Description:
          type: string
        DisplayName:
          type: string
        JWTScope:
          type: string
        Model:
          $ref: '#/components/schemas/Model'
        Name:
          type: string
        Per:
          format: int64
          type: integer
        ProviderID:
          type: integer
        QuotaMax:
          format: int64
          type: integer
        QuotaRenewalRate:
          format: int64
          type: integer
        Rate:
          format: int64
          type: integer
        ReferenceID:
          type: string
      type: object
    Plan-create:
      properties:
        AuthType:
          type: string
        AutoApproveAccessRequests:
          type: boolean
        Catalogues:
          items:
            $ref: '#/components/schemas/Catalogue'
          type: array
        Description:
          type: string
        DisplayName:
          type: string
        JWTScope:
          type: string
        Model:
          $ref: '#/components/schemas/Model'
        Name:
          type: string
        Per:
          format: int64
          type: integer
        ProviderID:
          type: integer
        QuotaMax:
          format: int64
          type: integer
        QuotaRenewalRate:
          format: int64
          type: integer
        Rate:
          format: int64
          type: integer
        ReferenceID:
          type: string
      type: object
    Plan-index:
      items:
        $ref: '#/components/schemas/Plan-index-elem'
      type: array
    Plan-index-elem:
      properties:
        AutoApproveAccessRequests:
          type: boolean
          description: Defines if access requests with this plan are approved automatically
          example: true
        DisplayName:
          type: string
          description: Name of this plan that is displayed to API Consumers
          example: Free plan
        Name:
          type: string
          description: Name of this plan how it comes from the API Provider
          example: Free plan
        ReferenceID:
          type: string
          description: ID of this plan how it comes from the API Provider
          example: 6490fd451ba6a6000108864e
        Quota:
          type: string
          description: Quota of API calls available to customers using this plan as it is defined in the API Provider
          example: unlimited
        RateLimit:
          type: string
          description: Ratelimit as it is defined in the API Provider
          exmaple: "1000 calls / 1 minute(s)"
        ID:
          type: integer
          description: UID of this plan
          example: 1
      type: object
    Plan-show:
      properties:
        AuthType:
          type: string
        Catalogues:
          type: array
          items:
            type: string
            example: "Public Catalogue"
            description: Name of a catalogue
          description: Array of names of catalogues in which this API Product is published
        AutoApproveAccessRequests:
          type: boolean
          description: Defines if access requests with this plan are approved automatically
          example: true
        DisplayName:
          type: string
          description: Name of this plan that is displayed to API Consumers
          example: Free plan
        Name:
          type: string
          description: Name of this plan how it comes from the API Provider
          example: Free plan
        Description:
          type: string
          description: Human-readable description of this plan
          example: Free plan offers only basic functionality
        ReferenceID:
          type: string
          description: ID of this plan how it comes from the API Provider
          example: 6490fd451ba6a6000108864e
        Quota:
          type: string
          description: Quota of API calls available to customers using this plan as it is defined in the API Provider
          example: unlimited
        RateLimit:
          type: string
          description: Ratelimit as it is defined in the API Provider
          exmaple: "1000 calls / 1 minute(s)"
        ID:
          type: integer
          description: UID of this plan
          example: 1
        JWTScope:
          type: string
          description: oAuth2.0 scopes that will be assigned to oAuth2.0 clients that use this plan. Should be comma-separated string
          example: free-plan
      type: object
    Plan-update:
      properties:
        AutoApproveAccessRequests:
          type: boolean
          description: Defines if access requests with this plan are approved automatically
          example: true
        Catalogues:
          items:
            type: integer
            example: 1
            description: UID of a Catalogue
          type: array
          description: Catalogues in which this API Product is published
        DisplayName:
          type: string
          description: Name of this plan that is displayed to API Consumers
          example: Free plan
        Description:
          type: string
          description: Human-readable description of this plan
          example: Free plan offers only basic functionality
        JWTScope:
          type: string
          description: oAuth2.0 scopes that will be assigned to oAuth2.0 clients that use this plan. Should be comma-separated string
          example: free-plan
      type: object
    Category:
      properties:
        Model:
          $ref: '#/components/schemas/Model'
        Name:
          type: string
        Posts:
          items:
            $ref: '#/components/schemas/Post'
          type: array
      type: object
    Post:
      properties:
        Author:
          $ref: '#/components/schemas/User'
        AuthorID:
          type: integer
        BlogSiteID:
          type: integer
        Categories:
          items:
            $ref: '#/components/schemas/Category'
          type: array
        Content:
          type: string
        HeaderImage:
          $ref: '#/components/schemas/ImageStore'
        Lede:
          type: string
        MarkdownContent:
          type: string
        MarkdownEnabled:
          type: boolean
        Model:
          $ref: '#/components/schemas/Model'
        Path:
          type: string
        PreviewContent:
          type: string
        ProductDoc:
          type: boolean
        ProductID:
          type: integer
        Sorting:
          $ref: '#/components/schemas/Sorting'
        Status:
          type: string
        Tags:
          items:
            $ref: '#/components/schemas/Tag'
          type: array
        Title:
          type: string
      type: object
    Post-create:
      properties:
        Content:
          type: string
          description: Content of this tutorial page. If `MarkdownEnabled` is true then content of this tutorial page is treated as Markdown text and as HTML otherwise
          example: "# Title\r\n## Subtitle\r\nContent goes here"
        MarkdownEnabled:
          type: boolean
          description: Switches content between Markdown and HTML versions
          example: true
        Status:
          enum: ["published", "draft", "review"]
          description: Publication status this tutorial page
          example: "published"
        Title:
          type: string
          description: Title of this tutorial page which is displayed in the Get started section of an API Product details page
          example: Get started this API Product
      type: object
    Post-index:
      items:
        $ref: '#/components/schemas/Post-index-elem'
      type: array
    Post-index-elem:
      properties:
        ID:
          type: integer
          description: UID of this tutorial page
          example: 1
        Content:
          type: string
          description: Content of this tutorial page. If `MarkdownEnabled` is true then content of this tutorial page is treated as Markdown text and as HTML otherwise
          example: "# Title\r\n## Subtitle\r\nContent goes here"
        MarkdownEnabled:
          type: boolean
          description: Switches content between Markdown and HTML versions
          example: true
        Status:
          enum: ["published", "draft", "review"]
          description: Publication status this tutorial page
          example: "published"
        Title:
          type: string
          description: Title of this tutorial page which is displayed in the Get started section of an API Product details page
          example: Get started this API Product
      type: object
    Post-reorder:
      type: array
      items:
        type: integer
        example: 1
        description: UID of a doc page
    Product:
      properties:
        APIDetails:
          items:
            $ref: '#/components/schemas/Product-APIDetail'
          type: array
        AuthType:
          type: string
        Catalogues:
          items:
            $ref: '#/components/schemas/Catalogue'
          type: array
        Content:
          type: string
        DCREnabled:
          type: boolean
        Description:
          type: string
        DisplayName:
          type: string
        Docs:
          items:
            $ref: '#/components/schemas/Post'
          type: array
        Feature:
          type: boolean
        Logo:
          $ref: '#/components/schemas/ImageStore'
        Model:
          $ref: '#/components/schemas/Model'
        Name:
          type: string
        Path:
          type: string
        ProviderID:
          type: integer
        ReferenceID:
          type: string
        Scopes:
          type: string
        Tags:
          items:
            $ref: '#/components/schemas/Tag'
          type: array
        Templates:
          items:
            $ref: '#/components/schemas/DCRConfigTemplate'
          type: array
      type: object
    Product-create:
      properties:
        APIDetails:
          items:
            $ref: '#/components/schemas/Product-APIDetail'
          type: array
        AuthType:
          type: string
        Catalogues:
          items:
            $ref: '#/components/schemas/Catalogue'
          type: array
        Content:
          type: string
        DCREnabled:
          type: boolean
        Description:
          type: string
        DisplayName:
          type: string
        Docs:
          items:
            $ref: '#/components/schemas/Post'
          type: array
        Feature:
          type: boolean
        Logo:
          $ref: '#/components/schemas/ImageStore'
        Model:
          $ref: '#/components/schemas/Model'
        Name:
          type: string
        Path:
          type: string
        ProviderID:
          type: integer
        ReferenceID:
          type: string
        Scopes:
          type: string
        Tags:
          items:
            $ref: '#/components/schemas/Tag'
          type: array
        Templates:
          items:
            $ref: '#/components/schemas/DCRConfigTemplate'
          type: array
      type: object
    Product-index:
      items:
        $ref: '#/components/schemas/Product-index-elem'
      type: array
    Product-index-elem:
      properties:
        APIDetails:
          items:
            $ref: '#/components/schemas/Product-APIDetail-index'
          type: array
        AuthType:
          type: string
        DCREnabled:
          type: boolean
        DisplayName:
          type: string
        Feature:
          type: boolean
        Name:
          type: string
        Path:
          type: string
        ReferenceID:
          type: string
      type: object
    Product-show:
      properties:
        ID:
          type: integer
          description: UID of this API Product
          exmaple: 2
        APIDetails:
          items:
            $ref: '#/components/schemas/Product-APIDetail'
          type: array
          description: APIs included in this API Product
        AuthType:
          type: string
          description: Authentication type of APIs that are included in this API Product
          example: "authToken"
        Catalogues:
          items:
            type: string
            descritption: Catalogue name
            example: "Public Catalogue"
          type: array
          description: Catalogues in which this API Product is listed
        Content:
          type: string
          description: Marketing description of an API Product formated as HTML text fragment
          example: "<p>Description goes here</p>"
        DCREnabled:
          type: boolean
          description: Defines if Dynamic Client Registration is enabled for this API Product
          example: true
        Description:
          type: string
          description: Short description of this API Product which is displayed in the Catalogue page
          exmaple: "Description goes here"
        DisplayName:
          type: string
          description: Name of an API Product that is displayed in the API Product Details and Catalogue pages
          example: "ACME Payment API"
        Feature:
          type: boolean
          description: Defines if this product should be featured on the home page of the portal
          example: true
        Name:
          type: string
          description: name of this API Product as it comes from the API Provider
          Exmaple: "Payment API"
        Path:
          type: string
          description: "URI fragment that is specific for this product. `Path` is added to the catalogue path to form URI to this product: /portal/catalogue-products/`Path`"
          example: "acme-payment-api"
        Logo:
          type: string
          description: Path to the logo image for this API Product
          example: "/system/products/2/logo/logo.png"
        ReferenceID:
          type: string
          description: UID of this API Product in the API Provider
          example: 6490fd2a1ba6a6000108864d
        Scopes:
          type: string
          description: "oAuth2.0 scopes that will be assigned to oAuth2.0 clients that use this API Product. Should be comma-separated string"
          example: "payments,clients"
        Tags:
          items:
            type: string
            example: "payment"
            description: Name of a tag
          type: array
          description: Tags assigned to this API Product
        Templates:
          items:
            type: string
            description: "Name of an oAuth2.0 template"
            example: "Web application"
          type: array
          description: "oAuth2.0 templates that are assigned to this API Product"
      type: object
    Product-update:
      properties:
        APIDetails:
          items:
            $ref: '#/components/schemas/Product-APIDetail-edit'
          type: array
        AuthType:
          type: string
        Catalogues:
          items:
            type: integer
            description: UID of an API Product
            example: 1
          type: array
          description: Catalogues in which this API Product is listed
        Content:
          type: string
          description: Marketing description of an API Product formated as HTML text fragment
          example: "<p>Description goes here</p>"
        DCREnabled:
          type: boolean
          description: Defines if Dynamic Client Registration is enabled for this API Product
          example: true
        Description:
          type: string
          description: Short description of this API Product which is displayed in the Catalogue page
          exmaple: "Description goes here"
        DisplayName:
          type: string
          description: Name of an API Product that is displayed in the API Product Details and Catalogue pages
          example: "ACME Payment API"
        Feature:
          type: boolean
          description: Defines if this product should be featured on the home page of the portal
          example: true
        Name:
          type: string
          description: name of this API Product as it comes from the API Provider
          Exmaple: "Payment API"
        Path:
          type: string
          description: "URI fragment that is specific for this product. `Path` is added to the catalogue path to form URI to this product: /portal/catalogue-products/`Path`"
          example: "acme-payment-api"
        Scopes:
          type: string
          description: "oAuth2.0 scopes that will be assigned to oAuth2.0 clients that use this API Product. Should be comma-separated string"
          example: "payments,clients"
        Tags:
          items:
            type: integer
            example: 1
            description: Name of a tag
          type: array
          description: Tags assigned to this API Product
        Templates:
          items:
            type: integer
            description: "Name of an oAuth2.0 template"
            example: 1
          type: array
          description: "oAuth2.0 templates that are assigned to this API Product"
      type: object
    Provider-create:
      properties:
        Configuration:
          $ref: '#/components/schemas/ProviderConfig-create'
        Name:
          type: string
        Type:
          type: string
      type: object
    Provider-index:
      items:
        $ref: '#/components/schemas/Provider-index-elem'
      type: array
    Provider-index-elem:
      properties:
        LastSyncedAt:
          type: string
          description: The last time this provider was synchronized with the portal
          example: "7 minutes 5 seconds ago"
        ID:
          type: integer
          description: UUID of this API provider in the portal's database
          example: 1
        Name:
          type: string
          description: Name of this API Provider
          example: "Tyk Dashboard"
        Status:
          type: string
          description: Identifies if this API Provider is Up and ready for synchronization
          example: "Up"
        Type:
          type: string
          description: Type of API gateway used by this API Provider e.g. Tyk or AWS
          example: "tyk-pro"
      type: object
    Provider-show:
      properties:
        Configuration:
          $ref: '#/components/schemas/ProviderConfig'
        LastSyncedAt:
          type: string
          description: The last time this provider was synchronized with the portal
          example: "Not synced yet"
        ID:
          type: integer
          description: UUID of this API provider in the portal's database
          example: 1
        UpdatedAt:
          format: date-time
          type: string
          description: When this API Provider was updated the last time
          example: "2023-06-23 19:13"
        CreatedAt:
          format: date-time
          type: string
          description: When this API Provider was created
          example: "2023-06-23 19:13"
        Name:
          type: string
          description: Name of this API Provider
          example: "Tyk Dashboard"
        Status:
          type: string
          description: Identifies if this API Provider is Up and ready for synchronization
          example: "Up"
        Type:
          type: string
          description: Type of API gateway used by this API Provider e.g. Tyk or AWS
          example: "tyk-pro"
      type: object
    Provider-update:
      properties:
        Configuration:
          $ref: '#/components/schemas/ProviderConfig'
        Name:
          type: string
      type: object
    ProviderConfig:
      properties:
        MetaData:
          type: string
          description: Connection settings for this API Provider
          example: "{\"URL\":\"http://localhost:3002\",\"Secret\":\"04d31017802f482f76414a372db30fc2\",\"OrgID\":\"5e9d9544a1dcd60001d0ed20\",\"Gateway\":\"\",\"PoliciesTags\":[],\"InsecureSkipVerify\":false}"
        ID:
          type: integer
          description: UID of an API provider's metadata
          example: 1
      type: object
    ProviderConfig-create:
      properties:
        MetaData:
          type: string
          description: Connection settings for this API Provider
          example: "{\"URL\":\"http://localhost:3002\",\"Secret\":\"04d31017802f482f76414a372db30fc2\",\"OrgID\":\"5e9d9544a1dcd60001d0ed20\",\"Gateway\":\"\",\"PoliciesTags\":[],\"InsecureSkipVerify\":false}"
      type: object
    Status:
      properties:
        status:
          type: string
          description: Status of the operation
          example: ok
      type: object
    StatusWithMessage:
      properties:
        status:
          type: string
          description: Status of the operation
          example: ok
        message:
          type: string
          description: Human-readable description of the status
          example: "Action Synchronize: Executed successfully"
      type: object
    StatusWithErrors:
      properties:
        status:
          type: string
          description: Status of the operation
          example: error
        errors:
          type: array
          description: Human-readable description of the errors
          items:
            type: string
            example: "Failed to sync provider Tyk Dashboard (Edit Me): TykPro.Sync. getting available products: fetching policies: Get \"http://localhost:30023/api/portal/policies/?p=-2\": dial tcp [::1]:30023: connect: connection refused"
      type: object
    OnlyErrors:
      properties:
        errors:
          type: array
          description: Human-readable description of the errors
          items:
            type: string
            example: "record not found"
      type: object
    SiteSetting:
      properties:
        Enable:
          type: boolean
      type: object
    FormsSetting:
      properties:
        Enable:
          type: boolean
      type: object
    S3Setting:
      properties:
        ACL:
          type: string
        AccessKey:
          type: string
        Bucket:
          type: string
        Endpoint:
          type: string
        PresignURLs:
          type: boolean
        Region:
          type: string
        SecretKey:
          type: string
      type: object
    Settings-create:
      properties:
        Blog:
          $ref: '#/components/schemas/BlogSetting'
        Database:
          $ref: '#/components/schemas/DatabaseSetting'
        Forms:
          $ref: '#/components/schemas/FormsSetting'
        HostPort:
          type: integer
        JwtSigningKey:
          type: string
        LicenseKey:
          type: string
        LogFormat:
          type: string
        LogLevel:
          type: string
        PortalAPISecret:
          type: string
        ProductDocRenderer:
          type: string
        RefreshInterval:
          type: integer
        S3:
          $ref: '#/components/schemas/S3Setting'
        Site:
          $ref: '#/components/schemas/SiteSetting'
        Storage:
          type: string
        StoreSessionName:
          type: string
        TLSConfig:
          $ref: '#/components/schemas/TLSSetting'
        Theming:
          $ref: '#/components/schemas/ThemeSetting'
      type: object
    Settings-index:
      items:
        $ref: '#/components/schemas/Settings-index-elem'
      type: array
    Settings-index-elem:
      properties:
        Blog:
          $ref: '#/components/schemas/BlogSetting'
        Database:
          $ref: '#/components/schemas/DatabaseSetting'
        Forms:
          $ref: '#/components/schemas/FormsSetting'
        HostPort:
          type: integer
        JwtSigningKey:
          type: string
        LicenseKey:
          type: string
        LogFormat:
          type: string
        LogLevel:
          type: string
        PortalAPISecret:
          type: string
        ProductDocRenderer:
          type: string
        RefreshInterval:
          type: integer
        S3:
          $ref: '#/components/schemas/S3Setting'
        Site:
          $ref: '#/components/schemas/SiteSetting'
        Storage:
          type: string
        StoreSessionName:
          type: string
        TLSConfig:
          $ref: '#/components/schemas/TLSSetting'
        Theming:
          $ref: '#/components/schemas/ThemeSetting'
      type: object
    Settings-show:
      properties:
        Blog:
          $ref: '#/components/schemas/BlogSetting'
        Database:
          $ref: '#/components/schemas/DatabaseSetting'
        Forms:
          $ref: '#/components/schemas/FormsSetting'
        HostPort:
          type: integer
        JwtSigningKey:
          type: string
        LicenseKey:
          type: string
        LogFormat:
          type: string
        LogLevel:
          type: string
        PortalAPISecret:
          type: string
        ProductDocRenderer:
          type: string
        RefreshInterval:
          type: integer
        S3:
          $ref: '#/components/schemas/S3Setting'
        Site:
          $ref: '#/components/schemas/SiteSetting'
        Storage:
          type: string
        StoreSessionName:
          type: string
        TLSConfig:
          $ref: '#/components/schemas/TLSSetting'
        Theming:
          $ref: '#/components/schemas/ThemeSetting'
      type: object
    Settings-update:
      properties:
        Blog:
          $ref: '#/components/schemas/BlogSetting'
        Database:
          $ref: '#/components/schemas/DatabaseSetting'
        Forms:
          $ref: '#/components/schemas/FormsSetting'
        HostPort:
          type: integer
        JwtSigningKey:
          type: string
        LicenseKey:
          type: string
        LogFormat:
          type: string
        LogLevel:
          type: string
        PortalAPISecret:
          type: string
        ProductDocRenderer:
          type: string
        RefreshInterval:
          type: integer
        S3:
          $ref: '#/components/schemas/S3Setting'
        Site:
          $ref: '#/components/schemas/SiteSetting'
        Storage:
          type: string
        StoreSessionName:
          type: string
        TLSConfig:
          $ref: '#/components/schemas/TLSSetting'
        Theming:
          $ref: '#/components/schemas/ThemeSetting'
      type: object
    Slug:
      properties:
        Slug:
          type: string
      type: object
    Sorting:
      properties:
        Position:
          type: integer
      type: object
    TLSSetting:
      properties:
        Certificates:
          items:
            $ref: '#/components/schemas/Certificate'
          type: array
        Enable:
          type: boolean
        InsecureSkipVerify:
          type: boolean
        MinVersion:
          type: integer
      type: object
    Tag:
      properties:
        ID:
          type: integer
        Name:
          type: string
      type: object
    Team:
      properties:
        Default:
          type: boolean
        Model:
          $ref: '#/components/schemas/Model'
        Name:
          type: string
        Organisation:
          $ref: '#/components/schemas/Organisation'
        OrganisationID:
          type: integer
        Users:
          items:
            $ref: '#/components/schemas/User'
          type: array
      type: object
    Team-create:
      properties:
        Name:
          type: string
          description: Name of a team
          example: Partner Team A
      type: object
    Team-index:
      items:
        $ref: '#/components/schemas/Team-index-elem'
      type: array
    Team-index-elem:
      properties:
        Default:
          type: boolean
          description: Identifies if this
          example: true
        ID:
          type: integer
          description: UID of this team
          example: 1
        Name:
          type: string
          description: Name of this team
          example: Default Organisation All users
      type: object
    Team-show:
      properties:
        Name:
          type: string
          description: Name of this team
          example: Default Organisation All users
        ID:
          type: integer
          description: UID of this team
          example: 11
        CreatedAt:
          format: date-time
          description: Date-time when a team is created
          example: "2023-06-23 21:02"
          type: string
        UpdatedAt:
          format: date-time
          description: Date-time when a team was updated the last time
          example: "2023-06-23 21:02"
          type: string
        Users:
          items:
            types: strings
            example: "User#6"
            description: User ID
          type: array
          description: Users included in this organisation. For newly created organisation will an empty array
      type: object
    Team-update:
      properties:
        Name:
          type: string
          description: Name of this team
          example: Default Organisation All users
        Users:
          items:
            type: integer
            description: UID of a user
            example: 1
          type: array
          description: UID of users included into this team
      type: object
    TextContentBlock:
      properties:
        Content:
          type: string
        Model:
          $ref: '#/components/schemas/Model'
        Name:
          type: string
        PageID:
          type: integer
      type: object
    ThemeSetting:
      properties:
        Path:
          type: string
        Theme:
          type: string
      type: object
    User:
      properties:
        JWTToken:
          type: string
          description: API access credentials to the admin APIs that are described in this spectification
          example: "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJQcm92aWRlciI6Im5vbmUiLCJVc2VySUQiOiIkMmEkMTAkMFhRUEtCSC9nenFWMVhnRkRzUWViLk90bmdzVVlsQk9VSE14T045bWZveEs3ek9zSzVKLnkifQ.SHZtWNA-sYHUwSLEkWFo1r049WBWcQJVco_WH21jXHs"
        APITokenCreatedAt:
          format: date-time
          description: Date-time when the `JWTToken` is created
          example: "2023-06-23"
          type: string
        Active:
          type: boolean
        Basic:
          $ref: '#/components/schemas/Basic'
        Cart:
          $ref: '#/components/schemas/Cart'
        Email:
          description: Email of a user
          type: string
          example: "admin@acme.com"
        First:
          type: string
          description: First name of a user
          example: John
        Joined:
          format: date-time
          type: string
        Last:
          type: string
          description: Last name of a user
          example: Doe
        Model:
          $ref: '#/components/schemas/Model'
        Organisation:
          $ref: '#/components/schemas/Organisation'
        OrganisationID:
          type: integer
        Password:
          type: string
        ProviderID:
          type: integer
        ResetPassword:
          type: boolean
        Role:
          type: string
          description: Role of a user in their organisation
          example: consumer-team-member
        SSOKey:
          type: string
        Teams:
          items:
            $ref: '#/components/schemas/Team'
          type: array
      type: object
    User-create:
      properties:
        Active:
          description: Defines if this user is active and can login to the portal
          type: boolean
          example: true
        Email:
          description: Email of a user
          type: string
          example: "admin@acme.com"
        First:
          type: string
          description: First name of a user
          example: John
        Last:
          type: string
          description: Last name of a user
          example: Doe
        OrganisationID:
          type: integer
          description: ID of an organisation where this user belongs to. For admin users it is always equal to 0
          example: 1
        Role:
          type: string
          description: Role of a user in their organisation
          example: consumer-team-member
        Provider:
          type: string
          description: Type of identity provider for this user, e.g. password, github, etc.
          example: "password"
        ResetPassword:
          type: boolean
          description: Determines if a user must change their password at the next login
          example: false
      type: object
    User-index:
      items:
        $ref: '#/components/schemas/User-index-elem'
      type: array
    User-index-elem:
      properties:
        ID:
          description: UID of a user
          type: integer
          example: 1
        Active:
          description: Defines if this user is active and can login to the portal
          type: boolean
          example: true
        Email:
          description: Email of a user
          type: string
          example: "admin@acme.com"
        First:
          type: string
          description: First name of a user
          example: John
        Last:
          type: string
          description: Last name of a user
          example: Doe
        OrganisationID:
          type: integer
          description: ID of an organisation where this user belongs to. For admin users it is always equal to 0
          example: 1
        Role:
          type: string
          description: Role of a user in their organisation
          example: consumer-team-member
        Provider:
          type: string
          description: Type of identity provider for this user, e.g. password, github, etc.
          example: "password"
      type: object
    User-show:
      properties:
        JWTToken:
          type: string
          description: API access credentials to the admin APIs that are described in this spectification
          example: "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJQcm92aWRlciI6Im5vbmUiLCJVc2VySUQiOiIkMmEkMTAkMFhRUEtCSC9nenFWMVhnRkRzUWViLk90bmdzVVlsQk9VSE14T045bWZveEs3ek9zSzVKLnkifQ.SHZtWNA-sYHUwSLEkWFo1r049WBWcQJVco_WH21jXHs"
        APITokenCreatedAt:
          format: date-time
          description: Date-time when the `JWTToken` is created
          example: "2023-06-23"
          type: string
        Active:
          description: Defines if this user is active and can login to the portal
          type: boolean
          example: true
        Email:
          description: Email of a user
          type: string
          example: "admin@acme.com"
        First:
          type: string
          description: First name of a user
          example: John
        Last:
          type: string
          description: Last name of a user
          example: Doe
        OrganisationID:
          type: integer
          description: ID of an organisation where this user belongs to. For admin users it is always equal to 0
          example: 1
        Organisation:
          type: string
          description: Name of an rganisation where this user belongs to
          example: Default Organisation
        Role:
          type: string
          description: Role of a user in their organisation
          example: consumer-team-member
        Provider:
          type: string
          description: Type of identity provider for this user, e.g. password, github, etc.
          example: "password"
        ResetPassword:
          type: boolean
          description: Determines if a user must change their password at the next login
          example: false
        Teams:
          items:
            type: string
            description: Name of this user's teams
            example: "Default Organisation All users"
          type: array
        ID:
          type: integer
          description: UID of a user
          example: 1
        CreatedAt:
          format: date-time
          description: Date-time when a user is created
          example: "2023-06-23 21:02"
          type: string
        UpdatedAt:
          format: date-time
          description: Date-time when a user is updated the last time
          example: "2023-06-23 21:02"
          type: string
      type: object
    User-update:
      properties:
        Active:
          description: Defines if this user is active and can login to the portal
          type: boolean
          example: true
        Email:
          description: Email of a user
          type: string
          example: "admin@acme.com"
        First:
          type: string
          description: First name of a user
          example: John
        Last:
          type: string
          description: Last name of a user
          example: Doe
        Role:
          type: string
          description: Role of a user in their organisation
          example: consumer-team-member
        Provider:
          type: string
          description: Type of identity provider for this user, e.g. password, github, etc.
          example: "password"
        ResetPassword:
          type: boolean
          description: Determines if a user must change their password at the next login
          example: false
      type: object
  securitySchemes: {}